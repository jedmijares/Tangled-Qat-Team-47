.text

; Jed's last group's tests:
  lex $1, 0x4
  jumpr $1
  sys
  sys
  lex $1, 0x1
  lex $2, 0x4
  shift $1, $2
  lex $0, 0x10
  xor $0, $1
  brf $0, pass
  sys
pass:
  lex $2, 0xFC
  shift $1, $2
  lex $0, 0x1
  xor $0, $1
  brf $0, pass2
pass2:
  lex $1, 0xFB ; load -5 into $1
  neg $1 ; $1 should have 5
  load $2, 5 ; load $2 with 5
  xor $1, $2 ; check if $1 and $2 are identical
  brf $1, pass3
  sys
pass3:
  not $1 ; $1 should become 0xFFFF
  load $2, 0xFFFF ; load $2 with 0xFFFF
  xor $1, $2 ; check if $1 and $2 are identical
  brf $1, pass4
  sys
pass4:
startFloats:
  lex $1, 0x01 ; float conversion doesn't function
  lex $2, 0x80
  lhi $2, 0x3f
  float $1
  xor $1, $2
  brf $1, goodFloat
  sys
goodFloat:
  lex $1, 0x80
  lhi $1, 0x3f
  lex $2, 0x01
  int $1
  xor $1, $2
  brf $1, goodInt
  sys
goodInt:
  lex $1, 0x80
  lhi $1, 0x3f
  lex $2, 0x00
  lhi $2, 0x40
  lex $0, 0x40
  lhi $0, 0x40
  addf $1, $2
  xor $1, $0
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, goodAdd
  sys
goodAdd:
  lex $1, 0x00
  lhi $1, 0x40
  copy $2, $1
  lex $3, 0x80
  lhi $3, 0x40
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  mulf $1, $2
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  xor $1, $3
  not $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brt $1, goodMult
  sys
goodMult:
  lex $1, 0x80
  lhi $1, 0x3f
  lex $2, 0x80
  lhi $2, 0xbf
  negf $1
  xor $1, $2
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, goodNegf
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sys
goodNegf:
  lex $1, 0x00
  lhi $1, 0x40
  lex $2, 0x00
  lhi $2, 0x3f
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  recip $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  xor $1, $2
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, goodRecip
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sys
goodRecip:
  lex $1, 0x80
  lhi $1, 0x3f
  lex $2, 0x00
  lhi $2, 0x40
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sltf $1, $2
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brt $1, goodSltf
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sys
goodSltf:
  lex $1, 0x80
  lhi $1, 0x3f
  lex $2, 0x05
  lhi $2, 0x00
  store $1, $2
  load $3, $2
  xor $1, $3
  brf $1, goodLoadStore
  sys
goodLoadStore:
  lex $1, 0x5
  lex $2, 0x6
  slt $1, $2
  brt $1, sltPosTrue
  sys
sltPosTrue:
  lex $1, 0x5
  lex $2, 0x6
  slt $2, $1
  brf $2, sltPosFalse
  sys
sltPosFalse:
  lex $1, 0xFF
  lex $2, 0x6
  slt $2, $1
  brf $2, sltNegFalse
  sys
sltNegFalse:
  lex $1, 0xFF
  lex $2, 0x6
  slt $1, $2
  brt $1, sltNegTrue
  sys
sltNegTrue:
  lex $1, 0x3
  lex $2, 0x4
  add $1, $2
  lex $0, 0x7
  xor $1, $0
  brf $1, addPass
  sys
addPass:
  lex $1, 0x3
  lex $2, 0x2
  mul $1, $2
  lex $0, 0x6
  xor $1, $0
  brf $1, mulPass
  sys
mulPass:
  lex $1, 0xB
  lex $2, 0x9
  and $1, $2
  lex $0, 0x9
  xor $1, $0
  brf $1, andPass
  sys
andPass:
  lex $1, 0xB
  lex $2, 0x1
  or $1, $2
  lex $0, 0xB
  xor $1, $0
  brf $1, orPass
  sys
orPass:
  lex $1, 0x0
  lex $2, 0x1
;loop:
;  add $1, $2
;  copy $0, $1
;  lex $3, 0x5
;  xor $0, $3
;  brt $0, loop ; test backwards branch
  lex $1, 0xFF
  lex $2, 0x00
  store $1, $2 ; store 0xFFFF at location 0
  copy $1, $2 ; copy 0x0000 into reg 1
  brf $1, copyPass ; halt if any bit of reg 1 is 1
  sys
copyPass:
  load $1, $2 ; load 0xFFFF into reg 1
  brt $1, loadPass; halt if reg 1 is still 0
  sys
loadPass:
; begin testing NANs
  lex $0, 0xc0
  lhi $0, 0xFF
  lex $1, 0x80
  lhi $1, 0x3f
  addf $1, $0
  xor $1, $0
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, nanAdd
  sys
nanAdd:
  lex $0, 0xc0
  lhi $0, 0xFF
  lex $2, 0xc0
  lhi $2, 0xFF
  lex $1, 0x80
  lhi $1, 0x3f
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  mulf $2, $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  xor $2, $0
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $2, nanMul
  sys
nanMul:
  lex $0, 0xc0
  lhi $0, 0xFF
  lex $1, 0xc0
  lhi $1, 0xFF
  negf $0
  xor $0, $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $0, nanNegf
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sys
nanNegf:
  lex $2, 0xc0
  lhi $2, 0xFF
  lex $1, 0x80
  lhi $1, 0x3f
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sltf $1, $2
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, nanSltf
  sys
nanSltf:
  lex $2, 0xc0
  lhi $2, 0xFF
  lex $1, 0x80
  lhi $1, 0x3f
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sltf $2, $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $2, nanSltf2
  sys
nanSltf2:
  lex $1, 0x00
  lhi $1, 0x00
  lex $0, 0xc0
  lhi $0, 0xFF
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  recip $1
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  xor $1, $0
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  brf $1, recipNAN
  lex $7, 0x40
  lex $7, 0x40
  lex $7, 0x40
  sys
recipNAN:
  lex $1, 0
  brf $1, label1
  sys
label1:
  lhi $1, 1
  brt $1, label2
  sys
label2:
  load $1, 0xffff
  not $1
  brf $1, label3
  sys
label3:
  load $1, 1
  neg $1
  load $2, 1
  add $1, $2
  brf $1, label4
  sys
label4:
  load $1, 3
  load $2, 4
  mul $1, $2
  load $3, -12
  add $1, $3
  brf $1, label5
  sys
label5:
  load $1, 1
  load $2, 2
  slt $1, $2
  brt $1, label6
  sys
label6:
  load $1, 0xffff
  load $2, 0x0000
  and $1, $2
  brf $1, label7
  sys
label7:
  load $1, 0xffff
  load $2, 0x0000
  or $1, $2
  brt $1, label8
  sys
label8:
  load $1, 1
  load $2, 2
  shift $1, $2
  load $3, -4
  add $1, $3
  brf $1, label9
  sys
label9:
  load $1, 0xffff
  load $2, 0xffff
  xor $1, $2
  brf $1, label10
  sys
label10:
  load $1, 5
  load $2, 4
  store $1, $2
  load $3, $2
  neg $3
  add $1, $3
  brf $1, label11
  sys
label11:
  load $1, 1
  copy $1, $2
  neg $2
  add $1, $2
  brf $1, label12
  sys
label12:
  load $sp, 0xFFFF
  jump label13
  sys
label13:
  load $1, 0x3f80
  load $2, 0x4000
  addf $1, $2
  load $3, 0x4040
  xor $1, $3
  brf $1, label14
  sys
label14:
  load $1, 1
  float $1
  load $2, 0x3f80
  xor $1, $2
  brf $1, label15
  sys
label15:
  load $1, 0x3f80
  int $1
  load $2, 0x0001
  xor $1, $2
  brf $1, label16
  sys
label16:
  load $1, 0x4000
  load $2, 0x4000
  mulf $1, $2
  load $3, 0x4080
  xor $1, $3
  brf $1, label17
  sys
label17:
  load $1, 0x3f80
  negf $1
  load $2, 0xbf80
  xor $1, $2
  brf $1, label18
  sys
label18:
  load $1, 0x4000
  recip $1
  load $2, 0x3f00
  xor $1, $2
  brf $1, label19
  sys
label19:
  load $1, 0x3f80
  load $2, 0x4000
  sltf $1, $2
  brt $1, label20
  sys
label20:
  load $1, 0x0001
  load $2, 0x0002
  load $3, 0xf0f0
  load $4, 0xf0f3
  add $2, $1
  or $3, $2
  xor $3, $4
  brf $3, label21
  sys
label21:
  zero @0
  load $0, 255
  meas $0, @0
  brf $0, label22
  sys
label22:
  one @0
  load $0, 0
  meas $0, @0
  brt $0, label23
  sys
label23:
  had @0, 7
  load $0, 0
  load $1, 128
  meas $0, @0
  meas $1, @0
  and $1, $0
  brf $1, label24
  sys
label24:
  had @0, 7
  not @0
  load $0, 0
  meas $0, @0
  brt $0, label25
  sys
label25:
  had @0, 7
  one @1
  and @2, @1, @0
  load $0, 128
  meas $0, @2
  brt $0, label26
  sys
label26:
  had @0, 7
  one @1
  or @2, @1, @0
  load $0, 0
  meas $0, @2
  brt $0, label27
  sys
label27:
  had @0, 7
  one @1
  xor @2, @1, @0
  load $0, 128
  meas $0, @2
  brf $0, label28
  sys
label28:
  had @0, 7
  one @1
  cnot @1, @0
  load $0, 128
  meas $0, @1
  brf $0, label29
  sys
label29:
  had @0, 7
  one @1
  had @2, 0
  ccnot @1, @0, @2
  load $0, 128
  meas $0, @1
  brt $0, label30
  sys
label30:
  zero @0
  one @1
  had @2, 7
  cswap @0, @1, @2
  load $0, 128
  load $1, 128
  meas $0, @1
  meas $1, @0
  and $1, $0
  brf $1, label31
  sys
label31:
  zero @0
  one @1
  swap @0, @1
  load $0, 0
  load $1, 0
  load $2, 1
  load $3, 0
  meas $0, @1
  meas $1, @0
  or $3, $0
  and $2, $1
  xor $2, $3
  brt $2, label32
  sys
label32:
  had @0, 7
  load $0, 15
  load $1, 113
  add $1, $0
  next $0, @0
  xor $0, $1
  brf $0, label33
  sys
label33:
  one @0
  load $0, 15
  load $1, 16
  next $0, @0
  xor $0, $1
  brf $0, label34
  sys
label34:
  zero @0
  load $0, 15
  load $1, 0
  next $0, @0
  xor $0, $1
  brf $0, label35
  sys
label35:
  sys